Schema versioning with Flask-Migrate

## Creating a migration
As developer, modify models, then run this to generate a new migration and commit it.  When adding a new table, one must add the upgrade/downgrade method to past migration files with just a `pass` for method body.

```
cd /code/machinaris/api
FLASK_APP=__init__.py flask db stamp head
FLASK_APP=__init__.py flask db migrate
chown -R 1000.users .
chmod 666 migrations/versions/*.py
```
This creates migration based on current model.  Sometimes need 'flask db stamp head' before migrate.

## Testing a migration

Run scripts/setup_databases.sh manually. (This is run on each launch of the container)

```
cd /code/machinaris/api
FLASK_APP=__init__.py flask db upgrade
```

This applies migrations against old db

## Initial Setup of Flask-migrate

Note, initial adoption of flask-migrate happened in June, 2021 and should not need to be repeated.

To create very first migration, point to empty sqlite db, by putting these default_settings.py

```
SQLALCHEMY_DATABASE_URI = 'sqlite:///'
SQLALCHEMY_BINDS = {
    'stats':      'sqlite:///',
    'chiadog':    'sqlite:///',
}
```
then:
```
cd /code/machinaris/api
FLASK_APP=__init__.py flask db init --multidb
FLASK_APP=__init__.py flask db migrate
``` 
